priority -50

global !p

def create_table(snip):
	rows = snip.buffer[snip.line].split('x')[0]
	cols = snip.buffer[snip.line].split('x')[1]

	int_val = lambda string: int(''.join(s for s in string if s.isdigit()))

	rows = int_val(rows)
	cols = int_val(cols)

	offset = cols + 1
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

	snip.buffer[snip.line] = ''

	final_str = old_spacing + "\\begin{tabular}{|" + "|".join(['$' + str(i + 1) for i in range(cols)]) + "|}\n"

	for i in range(rows):
		final_str += old_spacing + '\t'
		final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])

		final_str += " \\\\\\\n"

	final_str += old_spacing + "\\end{tabular}\n$0"

	snip.expand_anon(final_str)

def add_row(snip):
	row_len = int(''.join(s for s in snip.buffer[snip.line] if s.isdigit()))
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

	snip.buffer[snip.line] = ''

	final_str = old_spacing
	final_str += " & ".join(['$' + str(j + 1) for j in range(row_len)])
	final_str += " \\\\\\"

	snip.expand_anon(final_str)

def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment():
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')")
	return x != '0' and y != '0'

endglobal

snippet "\\?b(egin)?" "begin{} / end{}" br
\begin{${1:something}}
	${0:${VISUAL}}
\end{$1}
endsnippet

snippet abs "abstract environment" b
\begin{abstract}
	$0
\end{abstract}
endsnippet

snippet tab "tabular / array environment" b
\begin{${1:t}${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${2:c}}
$0${2/(?<=.)(c|l|r)|./(?1: & )/g}
\end{$1${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}
endsnippet

pre_expand "create_table(snip)"
snippet "gentbl(\d+)x(\d+)" "Generate table of *width* by *height*" r
endsnippet

pre_expand "add_row(snip)"
snippet "tr(\d+)" "Add table row of dimension ..." r
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{${4:t}${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${5:c}}
	$0${5/(?<=.)(c|l|r)|./(?1: & )/g}
	\end{$4${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${2:htpb}]
	\centering
	\includegraphics[width=${3:0.8}\linewidth]{${4:name.ext}}
	\caption{${4/(\w+)\.\w+/\u$1/}$0}%
	\label{fig:${4/(\w+)\.\w+/$1/}}
\end{figure}
endsnippet

##########################################
# Lists
##########################################

snippet enum "Enumerate" b
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" b
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

context "env('itemize')"
snippet * "Individual item" wA
\item $0
endsnippet

context "env('enumerate')"
snippet * "Individual item" wA
\item $0
endsnippet
##########################################

snippet part "Part" b
\part{${1:part name}}%
\label{prt:${2:${1/(\w+)|\W+/(?1:\L$0\E:_)/ga}}}

$0
endsnippet

snippet cha "Chapter" b
\chapter{${1:chapter name}}%
\label{cha:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet sec "Section"
\section{${1:${VISUAL:section name}}}%
\label{sec:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet sec* "Section"
\section*{${1:${VISUAL:section name}}}%
\label{sec:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

${0}
endsnippet


snippet sub "Subsection"
\subsection{${1:${VISUAL:subsection name}}}%
\label{ssec:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet sub* "Subsection"
\subsection*{${1:${VISUAL:subsection name}}}%
\label{ssec:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

${0}
endsnippet

snippet ssub "Subsubsection"
\subsubsection{${1:${VISUAL:subsubsection name}}}%
\label{sssec:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet ssub* "Subsubsection"
\subsubsection*{${1:${VISUAL:subsubsection name}}}%
\label{sssec:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

${0}
endsnippet

snippet sssub "Subsubsubsection"
\subsubsubsection{${1:${VISUAL:subsection name}}}%
\label{ssssec:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet sssub* "Subsubsection"
\subsubsubsection*{${1:${VISUAL:subsubsection name}}}%
\label{ssssec:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

${0}
endsnippet

snippet par "Paragraph"
\paragraph{${1:${VISUAL:paragraph name}}}%
\label{par:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet subp "Subparagraph"
\subparagraph{${1:${VISUAL:subparagraph name}}}%
\label{par:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet ac "Acroynm normal" b
\ac{${1:acronym}}
$0
endsnippet

snippet acl "Acroynm expanded" b
\acl{${1:acronym}}
$0
endsnippet

snippet ni "Non-indented paragraph" b
\noindent
$0
endsnippet

snippet pac "Package" b
\usepackage`!p snip.rv='[' if t[1] else ""`${1:options}`!p snip.rv = ']' if t[1] else ""`{${2:package}}$0
endsnippet

snippet lp "Long parenthesis"
\left(${1:${VISUAL:contents}}\right)$0
endsnippet

snippet "mint(ed)?( (\S+))?" "Minted code typeset" br
\begin{listing}
\begin{minted}[linenos,numbersep=5pt,frame=lines,framesep=2mm]{${1:`!p
snip.rv = match.group(3) if match.group(2) is not None else "language"`}}
${2:${VISUAL:code}}
\end{minted}
\caption{${3:caption name}}
\label{lst:${4:${3/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}
\end{listing}

$0
endsnippet

snippet gln "New glossary item" b
\newglossaryentry{${1:identifier}}
{
  name={${2:name}},
  first={${3:first occurrence}},
  sort={${4:sort value}},
  description={${0:description}},
}
endsnippet
snippet glnl "New long glossary item" b
\longnewglossaryentry{${1:identifier}}
{
  name={${2:name}},
  first={${3:first occurrence}},
  sort={${4:sort value}},
}
{
  ${0:description}
}
endsnippet

##########################################
# Text formatting
##########################################
# Bold text
snippet bf "Bold"
\textbf{${1:${VISUAL}}} $0
endsnippet

# Italic text
snippet ita "Italics"
\textit{${1:${VISUAL}}} $0
endsnippet

# Underlined text
snippet und "Underline"
\underline{${1:${VISUAL}}} $0
endsnippet

# Overline text
snippet ov "Overline"
\overline{${1:${VISUAL}}} $0
endsnippet

# Emphasis text
snippet emp "Emphasize"
\emph{${1:${VISUAL}}} $0
endsnippet

# Small caps
snippet sc "Small caps"
\textsc{${1:${VISUAL}}} $0
endsnippet

# Typewriter (monospaced) text
snippet tt "Typewriter"
\texttt{${1:${VISUAL}}} $0
endsnippet

# Subscript text
snippet tsub "Subscripted text"
\textsubscript{${1:${VISUAL}}} $0
endsnippet

# Superscript text
snippet tsup "Superscripted text"
\textsuperscript{${1:${VISUAL}}} $0
endsnippet

# Footnote text
snippet ft "Footnote"
\footnote{${1:${VISUAL}}} $0
endsnippet
##########################################

# ######################
# Custom snippets below
#
# Many are taken from:
# https://github.com/gillescastel/latex-snippets/blob/master/tex.snippets
# ######################

snippet template "Basic template" b
\documentclass[a4paper]{article}

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{mathtools}
\usepackage{textcomp}
\usepackage{amsmath, amssymb}
\usepackage[mathscr]{euscript}
\usepackage[margin=1in]{geometry}
\usepackage{hyperref}

% figure support
\usepackage{import}
\usepackage{xifthen}
\pdfminorversion=7
\usepackage{pdfpages}
\usepackage{transparent}
\newcommand{\incfig}[1]{%
	\def\svgwidth{\columnwidth}
	\import{./Figures/}{#1.pdf_tex}
}

\pdfsuppresswarningpagegroup=1

% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Custom operators
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\DeclareMathOperator*{\corr}{corr}
\DeclareMathOperator*{\cov}{cov}
\DeclareMathOperator*{\var}{var}
\DeclareMathOperator*{\argmax}{arg\,max}
\DeclareMathOperator*{\argmin}{arg\,min}

% Norm and Abs
\DeclarePairedDelimiter\abs{\lvert}{\rvert}%
\DeclarePairedDelimiter\norm{\lVert}{\rVert}%
% Swap the definition of \abs* and \norm*, so that \abs
% and \norm resizes the size of the brackets, and the
% starred version does not.
\makeatletter
\let\oldabs\abs
\def\abs{\@ifstar{\oldabs}{\oldabs*}}
%
\let\oldnorm\norm
\def\norm{\@ifstar{\oldnorm}{\oldnorm*}}
\makeatother
\newtheorem{theorem}{Theorem}[section]
\newtheorem{corollary}{Corollary}[theorem]
\newtheorem{lemma}[theorem]{Lemma}

\begin{document}
	$0
\end{document}
endsnippet

snippet expandedsections "subsubsubsections and subparagraphs" w
% Subsubsubsections
\usepackage{titlesec}
\usepackage{hyperref}

\titleclass{\subsubsubsection}{straight}[\subsection]

\newcounter{subsubsubsection}[subsubsection]
\renewcommand\thesubsubsubsection{\thesubsubsection.\arabic{subsubsubsection}}
\renewcommand\theparagraph{\thesubsubsubsection.\arabic{paragraph}} % optional; useful if paragraphs are to be numbered

\titleformat{\subsubsubsection}
	{\normalfont\normalsize\bfseries}{\thesubsubsubsection}{1em}{}
\titlespacing*{\subsubsubsection}
{0pt}{3.25ex plus 1ex minus .2ex}{1.5ex plus .2ex}

\makeatletter
\renewcommand\paragraph{\@startsection{paragraph}{5}{\z@}%
	{3.25ex \@plus1ex \@minus.2ex}%
	{-1em}%
	{\normalfont\normalsize\bfseries}}
\renewcommand\subparagraph{\@startsection{subparagraph}{6}{\parindent}%
	{3.25ex \@plus1ex \@minus .2ex}%
	{-1em}%
	{\normalfont\normalsize\bfseries}}
\def\toclevel@subsubsubsection{4}
\def\toclevel@paragraph{5}
\def\toclevel@paragraph{6}
\def\l@subsubsubsection{\@dottedtocline{4}{7em}{4em}}
\def\l@paragraph{\@dottedtocline{5}{10em}{5em}}
\def\l@subparagraph{\@dottedtocline{6}{14em}{6em}}
\makeatother

\setcounter{secnumdepth}{4}
\setcounter{tocdepth}{4}
endsnippet

snippet "math functions" "Mathematics functions" b
\usepackage{xparse}

% ============================================================================
% Additional math functions for symbols etc...
% ============================================================================
\ExplSyntaxOn
% Vector with \vect{x1 x2 x3 ...} for column and \rvect{x1 & x2 & ...}
\NewDocumentCommand{\vect}{m}
{
	\begin{bmatrix}
	#1
	\end{bmatrix}
}
\ExplSyntaxOff
% ============================================================================
endsnippet

# Inline math mode
snippet inm "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

# Displayed math mode
snippet dm "Math" wA
\[
$1
.\] $0
endsnippet

# Sub- and super-scripts change a1 -> a_{1} and a_12 -> a_{12}
context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet _ "subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet ^ "superscript" iA
^{$1}$0
endsnippet

context "math()"
snippet sqrt "square root" iA
\sqrt{$1}$0
endsnippet

# Fractions
context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet / "Fraction" i
\\frac{${1:${VISUAL}}}{$2}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

# Sympy block
snippet sympy "sympy block " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
	.replace('^', '**') \
	.replace('{', '(') \
	.replace('}', ')') + ')')
`
endsnippet

###########################################################
# Math text formatting
###########################################################
priority 0
context "math()"
snippet "([a-zA-Z]*\\)" "any" ri
\\`!p snip.rv+=match.group(1)[0:-1]`
endsnippet

priority 100
context "math()"
snippet mbb "mathbb selection" i
\mathbb{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet "([a-zA-Z0-9]+)bb" "mathbb previous" rwA
\\mathbb{`!p snip.rv = match.group(1)`}
endsnippet

context "math()"
snippet "bb([a-zA-Z0-9])" "mathbb previous single" rwA
\\mathbb{`!p snip.rv = match.group(1)`}
endsnippet

priority 100
context "math()"
snippet mcal "mathcal selection" i
\mathcal{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet "([a-zA-Z0-9]+)cal" "mathcal previous" rwA
\\mathcal{`!p snip.rv = match.group(1)`}
endsnippet

context "math()"
snippet "scr([a-zA-Z0-9])" "mathcal previous single" rwA
\\mathcal{`!p snip.rv = match.group(1)`}
endsnippet

priority 100
context "math()"
snippet mscr "mathscr selection" i
\mathscr{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet "([a-zA-Z0-9]+)scr" "mathscr previous" rwA
\\mathscr{`!p snip.rv = match.group(1)`}
endsnippet

context "math()"
snippet "scr([a-zA-Z0-9])" "mathscr previous single" rwA
\\mathscr{`!p snip.rv = match.group(1)`}
endsnippet
###########################################################

###########################################################
# Combining math symbols placed on top of other symbols
###########################################################
priority 100
context "math()"
snippet "([^\s$]*)(~|tilde)" "widetilde above" rwA
`!p
if snip.v.text:
	snip.rv = "\\widetilde{" + snip.v.text + "}"
elif len(match.group(1)) == 0:
	snip.rv = "\\widetilde"
else:
	snip.rv = "\\widetilde{" + match.group(1) + "}"
`
endsnippet

priority 100
context "math()"
snippet "([^\s$]*)bar" "bar above" riA
`!p
if snip.v.text:
	snip.rv = "\\overline{" + snip.v.text + "}"
elif len(match.group(1)) == 0:
	snip.rv = "\\overline"
else:
	snip.rv = "\\overline{" + match.group(1) + "}"
`
endsnippet

priority 100
context "math()"
snippet "([^\s$]*)hat" "hat above" riA
`!p
if snip.v.text:
	snip.rv = "\\hat{" + snip.v.text + "}"
elif len(match.group(1)) == 0:
	snip.rv = "\\hat"
else:
	snip.rv = "\\hat{" + match.group(1) + "}"
`
endsnippet

priority 100
context "math()"
snippet "([^\s$]*)vec" "vector overright arrow" riA
`!p
if len(match.group(1)) == 0:
	snip.rv = "\\vec"
elif len(snip.v.text) == 1 and snip.v.text:
	snip.rv = "\\vec{" + snip.v.text + "}"
elif len(match.group(1)) == 1:
	snip.rv = "\\vec{" + match.group(1) +"}"
elif match.group(1)[0] == "\\":
	snip.rv = "\\vec{" + match.group(1) + "}"
elif snip.v.text:
	snip.rv = "\\overrightarrow{" + snip.v.text + "}"
else:
	snip.rv = "\\overrightarrow{" + match.group(1) + "}"
`
endsnippet

context "math()"
snippet "([a-zA-Z0-9]+)bm" "bm previous" rwA
\\bm{`!p snip.rv = match.group(1)`}
endsnippet

context "math()"
snippet "bm([a-zA-Z0-9])" "bm previous single" rwA
\\bm{`!p snip.rv = match.group(1)`}
endsnippet

# priority 101
# context "math()"
# snippet "bm([^{\s$]+)" "vector bold" r
# `!p
# if snip.v.text:
#     snip.rv = "\\bm{" + snip.v.text + "}"
# if len(match.group(0)) == 0:
#     snip.rv = "\\bm"
# else:
#     snip.rv = "\\bm{" + match.group(1) + "}"
# `
# endsnippet

# priority 100
# context "math()"
# snippet "([^\s$]+)bm" "vector bold" r
# `!p
# if snip.v.text:
#     snip.rv = "\\bm{" + snip.v.text + "}"
# if len(match.group(1)) == 0:
#     snip.rv = "\\bm"
# else:
#     snip.rv = "\\bm{" + match.group(1) + "}"
# `
# endsnippet
####################################################

# ###########################################################
# # Combining math symbols placed on top of other symbols
# ###########################################################
# priority 100
# context "math()"
# snippet "(\\?[a-zA-Z0-9]*)(([_^]?\{?[-a-zA-Z0-9{}\\]+\}?)*)(~|tilde)" "tilde" ri
# `!p
# if match.group(2) != None and len(match.group(2)) > 0:
#     if match.group(2)[0] == "_" or match.group(2)[0] == "^":
#         text = match.group(1)
#         end = match.group(2)
# else:
#     text = match.group(1)
#     end = ""
# if len(match.group(0)) == 0:
#     snip.rv = "\\widetilde"
# elif snip.v.text:
#     snip.rv = "\\widetilde{" + snip.v.text + "}"
# else:
#     snip.rv = "\\widetilde{" + text + "}" + end
# `
# endsnippet

# priority 100
# context "math()"
# snippet "(\\?[a-zA-Z0-9]*)(([_^]?\{?[-a-zA-Z0-9{}\\]+\}?)*)bar" "bar" ri
# `!p
# if match.group(2) != None and len(match.group(2)) > 0:
#     if match.group(2)[0] == "_" or match.group(2)[0] == "^":
#         text = match.group(1)
#         end = match.group(2)
# else:
#     text = match.group(1)
#     end = ""
# if len(match.group(0)) == 0:
#     snip.rv = "\\overline"
# elif snip.v.text:
#     snip.rv = "\\overline{" + snip.v.text + "}"
# else:
#     snip.rv = "\\overline{" + text + "}" + end
# `
# endsnippet

# priority 100
# context "math()"
# snippet "(\\?[a-zA-Z0-9]*)(([_^]?\{?[-a-zA-Z0-9{}\\]+\}?)*)hat" "hat" ri
# `!p
# if match.group(2) != None and len(match.group(2)) > 0:
#     if match.group(2)[0] == "_" or match.group(2)[0] == "^":
#         text = match.group(1)
#         end = match.group(2)
# else:
#     text = match.group(1)
#     end = ""
# if len(match.group(0)) == 0:
#     snip.rv = "\\hat"
# elif snip.v.text:
#     snip.rv = "\\hat{" + snip.v.text + "}"
# else:
#     snip.rv = "\\hat{" + text + "}" + end
# `
# endsnippet

# priority 100
# context "math()"
# snippet "(\\?[a-zA-Z0-9]*)(([_^]?\{?[-a-zA-Z0-9{}\\]+\}?)*)vec" "vector arrow" ri
# `!p
# if match.group(2) != None and len(match.group(2)) > 0:
#     if match.group(2)[0] == "_" or match.group(2)[0] == "^":
#         text = match.group(1)
#         end = match.group(2)
# else:
#     text = match.group(1)
#     end = ""
# if len(match.group(0)) == 0:
#     snip.rv = "\\vec"
# elif len(match.group(1)) == 1:
#     snip.rv = "\\vec{" + text + "}" + end
# elif match.group(1)[0] == "\\":
#     snip.rv = "\\vec{" + text + "}" + end
# elif len(snip.v.text) == 1 and snip.v.text:
#     snip.rv = "\\vec{" + snip.v.text + "}"
# elif snip.v.text:
#     snip.rv = "\\overrightarrow{" + snip.v.text + "}"
# else:
#     snip.rv = "\\overrightarrow{" + text + "}" + end
# `
# endsnippet

# priority 100
# context "math()"
# snippet "(\\?[a-zA-Z0-9]*)(([_^]?\{?[-a-zA-Z0-9{}\\]+\}?)*)bm" "bold vector" ri
# `!p
# if match.group(2) != None and len(match.group(2)) > 0:
#     if match.group(2)[0] == "_" or match.group(2)[0] == "^":
#         text = match.group(1)
#         end = match.group(2)
# else:
#     text = match.group(1)
#     end = ""
# if len(match.group(0)) == 0:
#     snip.rv = "\\bm"
# elif snip.v.text:
#     snip.rv = "\\bm{" + snip.v.text + "}"
# else:
#     snip.rv = "\\bm{" + text + "}" + end
# `
# endsnippet
# ####################################################

###########################################################
# Math Symbols
###########################################################
priority 100
context "math()"
snippet ... "ldots" iA
\ldots
endsnippet

context "math()"
snippet ldots "ldots" iA
\ldots
endsnippet

context "math()"
snippet vdots "vdots" iA
\vdots
endsnippet

context "math()"
snippet cdots "cdots" iA
\cdots
endsnippet

context "math()"
snippet ddots "ddots" iA
\ddots
endsnippet

context "math()"
snippet <- "gets" Ai
\gets
endsnippet

context "math()"
snippet => "implies" Ai
\implies
endsnippet

context "math()"
snippet =< "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet == "equals" iA
&= $1 \\\\
endsnippet

context "math()"
snippet .= "dot equals" iA
\doteq
endsnippet

priority 100
context "math()"
snippet 0( "proportional to" iA
\propto
endsnippet

context "math()"
snippet != "not equals" iA
\neq
endsnippet

context "math()"
snippet ~= "approx" iA
\approx
endsnippet

context "math()"
snippet pmat "pmat" iA
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

priority 200
context "math()"
snippet bmat "bmat" iA
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet

priority 100
context "math()"
snippet trans "transpose" iA
^{\top}$0
endsnippet

context "math()"
snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet lr( "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet lr| "left| right|" iA
\left| ${1:${VISUAL}} \right| $0
endsnippet

context "math()"
snippet lr{ "left\{ right\}" iA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

context "math()"
snippet lrb "left\{ right\}" iA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

context "math()"
snippet lr[ "left[ right]" iA
\left[ ${1:${VISUAL}} \right] $0
endsnippet

context "math()"
snippet lr< "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet

context "math()"
snippet prod "prod" w
\prod_{${1:t=0}}${2:^{${3:\infty}}} ${4:${VISUAL}}
endsnippet

context "math()"
snippet prodl "prod limits" w
\prod\limits_{${1:t=0}}${2:^{${3:\infty}}} ${4:${VISUAL}}
endsnippet

context "math()"
snippet sum "sum" w
\sum_{${1:t=0}}${2:^{${3:\infty}}} ${4:${VISUAL}}
endsnippet

context "math()"
snippet suml "sum limits" w
\sum\limits_{${1:t=0}}${2:^{${3:\infty}}} ${4:${VISUAL}}
endsnippet

context "math()"
snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}}
endsnippet

context "math()"
snippet ooo "infinity" iA
\infty
endsnippet

context "math()"
snippet <= "leq" iA
\le
endsnippet

context "math()"
snippet >= "geq" iA
\ge
endsnippet

context "math()"
context "math()"
snippet TE "there exists" iA
\exists
endsnippet

context "math()"
snippet FA "for all" iA
\forall
endsnippet

context "math()"
snippet stt "state at time t" iA
s_{${0:t}}$1
endsnippet

context "math()"
snippet Stt "state at time t" iA
S_{${0:t}}$1
endsnippet

context "math()"
snippet att "action at time t" iA
a_{${0:t}}$1
endsnippet

context "math()"
snippet Att "action at time t" iA
A_{${0:t}}$1
endsnippet

context "math()"
snippet rtt "reward at time t" iA
r_{${0:t}}$1
endsnippet

context "math()"
snippet Rtt "reward at time t" iA
R_{${0:t}}$1
endsnippet

context "math()"
snippet lll "l" iA
\ell
endsnippet

context "math()"
snippet nabla "nabla" iA
\nabla
endsnippet

context "math()"
snippet xx "cross" iA
\times
endsnippet

priority 100
context "math()"
snippet ** "cdot" iA
\cdot
endsnippet

context "math()"
snippet norm "norm" iA
\|$1\|$0
endsnippet

priority 50
context "math()"
snippet '(?<![a-zA-Z\\])(psi)' "psi" rw
\\`!p snip.rv = match.group(1)`
endsnippet

priority 100
context "math()"
snippet '(?<![a-zA-Z\\])(max|min|argmin|argmax)' "operators min/max" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 100
context "math()"
snippet '(?<![a-zA-Z\\])(sin|cos|arccos|cot|csc|ln|log|exp|star|perp|partial)' "operators1" rwA
\\`!p snip.rv = match.group(1)` $0
endsnippet

priority 100
context "math()"
snippet del "del" w
\partial $0
endsnippet

priority 200
context "math()"
snippet '(?<![a-zA-Z\\])(arcsin|arccos|arctan|arccot|arccsc|arcsec|int)' "operators2" rwA
\\`!p snip.rv = match.group(1)` $0
endsnippet

priority 100
context "math()"
snippet '(?<![a-zA-Z\\])(alpha|beta|gamma|delta)' "greek1" rw
\\`!p snip.rv = match.group(1)`
endsnippet

priority 100
context "math()"
snippet '(?<![a-zA-Z\\])(varepsilon|epsilon|theta|eta|zeta|iota|kappa)' "greek2" rw
\\`!p snip.rv = match.group(1)`
endsnippet

priority 100
context "math()"
snippet '(?<![a-zA-Z\\])(varsigma|sigma|tau|upsilon|phi|xi|chi|omega)' "greek3" rw
\\`!p snip.rv = match.group(1)`
endsnippet

priority 100
context "math()"
snippet '(?<![a-zA-Z\\])(kappa|lambda|ell|mu|nu|omicron|pi|rho)' "greek4" rw
\\`!p snip.rv = match.group(1)`
endsnippet

priority 300
context "math()"
snippet dint "integral" w
\int_{${1:-\infty}}${2:^{${3:\infty}}} ${3:${VISUAL}}
endsnippet

priority 300
context "math()"
snippet dintl "integral" w
\int\limits_{${1:-\infty}}${2:^{${3:\infty}}} ${3:${VISUAL}}
endsnippet

priority 100
context "math()"
snippet -> "to" iA
\to
endsnippet

priority 50
context "math()"
snippet to "to" i
\to
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto
endsnippet

context "math()"
snippet invs "inverse" iA
^{-1}
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet ~~ "~" iA
\sim
endsnippet

context "math()"
snippet VV "V or" iA
\vee
endsnippet

context "math()"
snippet AA "/\ and" iA
\wedge
endsnippet

context "math()"
snippet set "set" wA
\\{$1\\} $0
endsnippet

context "math()"
snippet || "mid" iA
\mid
endsnippet

context "math()"
snippet notin "not in" iA
\notin
endsnippet

context "math()"
snippet inn "in" wA
\in
endsnippet

context "math()"
snippet cap "cap" iA
\cap
endsnippet

context "math()"
snippet cup "cup" iA
\cup
endsnippet

context "math()"
snippet cc "subset" wA
\subset
endsnippet

context "math()"
snippet RR "real" iA
\mathbb{R}
endsnippet

context "math()"
snippet ZZ "integer" iA
\mathbb{Z}
endsnippet

context "math()"
snippet QQ "rational" iA
\mathbb{Q}
endsnippet

context "math()"
snippet CC "complex" wA
\mathbb{C}
endsnippet

context "math()"
snippet NN "natural" iA
\mathbb{N}
endsnippet

context "math()"
priority 50
snippet EE "expected" iA
\mathbb{E}[$1] $0
endsnippet

context "math()"
priority 51
snippet _EE "expected" iA
\mathbb{E}_{$1}[$2] $0
endsnippet

context "math()"
snippet SS "state space" iA
\mathscr{S}
endsnippet

context "math()"
snippet AS "action space" iA
\mathscr{A}
endsnippet

context "math()"
snippet RS "reward space" iA
\mathscr{R}
endsnippet

context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

context "math()"
snippet text "text" iA
\text{$1}$0
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

context "math()"
snippet "\((.)" "sample in batch" ri
^{(`!p snip.rv=match.group(1)`)}
endsnippet

context "math()"
snippet "\_(.)" "index" ri
_{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "\^(.)" "power" ri
^{`!p snip.rv=match.group(1)`}
endsnippet
###########################################################


###########################################################
# References
###########################################################
snippet reffig "reference to a figure" iA
${1:Figure}~\\ref{fig:$2} $0
endsnippet

snippet refeq "reference to a equation" iA
${1:Equation}~\\ref{eqn:$2} $0
endsnippet

snippet reftab "reference to a table" iA
${1:Table}~\\ref{tab:$2} $0
endsnippet

snippet reflist "reference to a listing" iA
${1:Listing}~\\ref{list:$2} $0
endsnippet

snippet refsec "reference to a section" iA
${1:Section}~\\ref{sec:$2} $0
endsnippet

snippet refpage "reference to a page" iA
${1:Page}~\\pageref{page:$2} $0
endsnippet

snippet refalg "reference to an algorithm" iA
${1:Algorithm}~\\ref{alg:$2} $0
endsnippet

snippet rref "generic reference" i
$1~\\ref{$2} $0
endsnippet

snippet leq "equation label" iA
\label{eqn:$1} $0
endsnippet

snippet lfig "figure label" iA
\label{fig:$1} $0
endsnippet

snippet ltab "table label" iA
\label{tab:$1} $0
endsnippet

snippet lsec "section label" iA
\label{sec:$1} $0
endsnippet
###########################################################

###########################################################
#Citations
###########################################################
snippet citen "citation number" w
	\\citen{${1}} $0
endsnippet

snippet citep* "citation in () all authors" w
	\\citep*{${1}} $0
endsnippet

snippet citep "citation in ()" w
	\\citep{${1}} $0
endsnippet

snippet citet "textual citation" w
	\\citet{${1}} $0
endsnippet

snippet citet* "textual citation all authors" w
	\\citet*{${1}} $0
endsnippet

snippet citeo "citation with options" w
	\\cite[${1}][${2}]{${3}} $0
endsnippet

snippet cite "citation" w
	\\cite{${1}} $0
endsnippet

snippet citea "cite author" w
	\\citeauthor{${1}} $0
endsnippet

snippet citey "citeyear" w
	\\citeyear{${1}} $0
endsnippet


###########################################################
# Fills
###########################################################
snippet hf "hfill" w
\\hfill

endsnippet

snippet vf "vfill" w
\\vfill

endsnippet


###########################################################
