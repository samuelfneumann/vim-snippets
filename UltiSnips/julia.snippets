snippet #! "shebang" iA
#!/usr/bin/env julia
endsnippet

# Documentation
snippet docf "function documentation" b
#' @description
#'
#' ${1:function description}
#'
#' ${2:@param ${3:name}::${4:Type} ${5:Description}}
#'
#' ${6:@returns ${7:name}::${8:Type} ${9:Description}}
#'
#' @examples
#'
#' ${10: function call examples}
endsnippet

snippet doct "type definition" b
#' @description
#'
#' ${1:type description}
#'
#' ${2:@field ${3:name}::${4:Type} ${5:Description}}
#'
#' @examples
#'
#' ${10: constructor examples}
endsnippet

snippet par "function parameter documentation" b
#' @param ${1:name}::${2:Type} ${0:Description}
endsnippet

snippet fld "type field documentation" b
#' @field ${1:name}::${2:Type} ${0:Description}
endsnippet

# Debugging
snippet deb "Debugger breakpoint" b
Main.@bp
endsnippet

snippet inf "Infiltrator breakpoint" b
Main.@infiltrate
endsnippet

# Conditionals
snippet if "if conditional" iA
if $1
	$0
end
endsnippet

snippet else "else part of statement" iA
else
	${0}
endsnippet

snippet "else if" "else if part of if statement" iA
else if ${1}
	${0}
endsnippet

snippet ifelse "full if-else statement" iA
if ${1}
	${2}
else
	${0}
end
endsnippet

snippet tern "ternary operator" iA
${1} ? ${2} : ${3:nothing}
endsnippet

# Loops
snippet for "for loop" iA
for $1 âˆˆ $2
	$0
end
endsnippet

snippet while "while loop"
while $1
	$0
end
endsnippet

# Error handling
snippet try "try catch" iA
try
	${1:${VISUAL}}
catch ${2}
	${0}
end
endsnippet

snippet fin "finally statement" iA
finally
	${0}
endsnippet

snippet thr "throw" iA
throw(${1})
${0}
endsnippet

# Functions
snippet func "function definition" iA
function ${1}(${2})
	${0}
end
endsnippet

snippet return "return value" iA
return ${1:nothing}
endsnippet

# Includes
snippet use "load a package" iA
using $0
endsnippet

snippet imp "import package" iA
import $0
endsnippet

snippet incl "include source code" iA
include("${1}")
${0}
endsnippet


