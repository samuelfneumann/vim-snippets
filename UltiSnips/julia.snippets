snippet #! "shebang" iA
#!/usr/bin/env julia
endsnippet

# Documentation
snippet docf "function documentation" b
# Press <tab> at end of function to insert docstring
snippet "function (.*)$" "function docstring" ri
"""
`!p
text = match.group(1).split(",")

out = ""
found = False
added = False
for i, word in enumerate(text):
    if "=" in word:
            found = True
    if found and not added:
            added = True
            out += "["

	if i != 0:
		out += "," + word
	else:
		out += word
if added:
	out = out[:-1] + "])"

snip.rv = "\t" + out + "\n"
`
${1:description}
"""
function `!p snip.rv=match.group(1)`
endsnippet

# Press <tab> at end of module or struct to insert docstring
snippet "(struct|module) (.*)$" "struct docstring" ri
"""
`!p
snip.rv = "\t" + match.group(2)
`

${1:description}
"""
`!p snip.rv=match.group(1) + " " + match.group(2)`
endsnippet


# Ignore some snippets in comments
priority 100
snippet "(#.*(struct|abstract|len|size|if|else|elif|try|finally|thr|err|for|wh|func|mod|tern|iferr|use|imp|incl|return))" "ignore if snippet in comment" riA
`!p
snip.rv=match.group(1)
`
endsnippet

# Conditionals
priority 50
snippet if "if conditional" A
if ${1:${VISUAL:condition}}
	$0
end
endsnippet

priority 50
snippet else "else part of statement" A
else
	$0
endsnippet

snippet elif "else if part of if statement" A
else if ${1:${VISUAL:condition}}
	$0
endsnippet

snippet tern "ternary operator" iA
${1:${VISUAL:condition}} ? $2 : ${3:nothing}
endsnippet

snippet iferr "if _ then error" A
if ${1:${VISUAL:condition}}
	error("${2:error_msg}")
end
$0
endsnippet

# Loops
snippet for "for loop" A
for ${1:i} = ${2:1:}${3:end}
	$0
end
endsnippet

snippet forin "for in loop" A
for ${1:i} âˆˆ ${2:container}
	$0
end
endsnippet

snippet while "while loop" A
while ${1:${VISUAL:condition}}
	$0
end
endsnippet

# Error handling
snippet try "try catch" A
try
	${1:${VISUAL}}
catch ${2:exception}}
	$0
end
endsnippet

snippet fin "finally statement" A
finally
	$0
endsnippet

snippet thr "throw" A
throw($1) $0
endsnippet

snippet err "error" A
error("${1:${VISUAL:error_msg}}") $0
endsnippet

# Functions
snippet func "function definition" A
function ${1:${VISUAL:name}}(${2:args...})
	$0
end
endsnippet

snippet func:: "function definition" A
function ${1:${VISUAL}}(${2:args...})::${3:Any}
	$0
end
endsnippet

snippet return "return value" A
return ${1:${VISUAL:nothing}}
endsnippet

# Includes
snippet use "load a package" A
using $0
endsnippet

snippet imp "import package" A
import $0
endsnippet

snippet incl "include source code" A
include("$1") $0
endsnippet

# Module snippets
snippet mod "module" A
module $1
$0
end
endsnippet

# Type snippets
snippet struct "structure" A
struct $1
	$2
end
$0
endsnippet

snippet abstract "abstract type" A
abstract type $1 end
$0
endsnippet

