snippet #! "shebang" iA
#!/usr/bin/env julia
endsnippet

# Documentation
snippet docf "function documentation" b
#' @description
#'
#' ${1:function description}
#'
#' ${2:@param ${3:name}::${4:Type} ${5:Description}}
#'
#' ${6:@returns ${7:name}::${8:Type} ${9:Description}}
#'
#' @examples
#'
#' ${10: function call examples}
endsnippet

snippet doct "type definition" b
#' @description
#'
#' ${1:type description}
#'
#' ${2:@field ${3:name}::${4:Type} ${5:Description}}
#'
#' @examples
#'
#' ${10: constructor examples}
endsnippet

snippet par "function parameter documentation" b
#' @param ${1:name}::${2:Type} ${0:Description}
endsnippet

snippet fld "type field documentation" b
#' @field ${1:name}::${2:Type} ${0:Description}
endsnippet

# Debugging
snippet deb "Debugger breakpoint" b
Main.@bp
endsnippet

snippet inf "Infiltrator breakpoint" b
Main.@infiltrate
endsnippet

# Conditionals
snippet if "if conditional" w
if $1
	$0
end
endsnippet

snippet else "else part of statement" 2
else
	$0
endsnippet

snippet elif "else if part of if statement" w
else if $1
	$0
endsnippet

snippet tern "ternary operator" iA
$1 ? $2 : ${3:nothing}
endsnippet

snippet iferr "if _ then error" w
if $1
	error("$2")
end
$0
endsnippet

# Loops
snippet for "for loop" w
for ${1:i} = ${2:i:}${3:end}
	$0
end
endsnippet

snippet forin "for in loop" w
for ${1:i} âˆˆ ${2:container}
	$0
end
endsnippet

snippet wh "while loop" w
while $1 ${2:<=} $3
	$0
end
endsnippet

# Error handling
snippet try "try catch" w
try
	${1:${VISUAL}}
catch $2
	$0
end
endsnippet

snippet fin "finally statement" w
finally
	$0
endsnippet

snippet thr "throw" w
throw($1)
$0
endsnippet

snippet err "error" w
error("$1")
$0
endsnippet

# Functions
snippet func "function definition" w
function $1($2)${3:::}
	$0
end
endsnippet

snippet return "return value" wA
return ${1:nothing}
endsnippet

# Includes
snippet use "load a package" w
using $0
endsnippet

snippet imp "import package" w
import $0
endsnippet

snippet incl "include source code" w
include("$1")
$0
endsnippet

# Module snippets
snippet mod "module" wA
module $1
$0
end
endsnippet

# Type snippets
snippet struct "structure" wA
struct $1
	$2
end
$0
endsnippet

snippet abstract "abstract type" wA
abstract type $1 end
$0
endsnippet

# Random functions
snippet len "length" wA
length(${1:${VISUAL}})$0
endsnippet

snippet println "println" wA
println(${1:${VISUAL}})$0
endsnippet

snippet size "size" wA
size(${1:${VISUAL}})$0
endsnippet

