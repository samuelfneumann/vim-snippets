# This file contains snippets that are always defined. I personally
# have snippets for signatures and often needed texts

# sligthly lower priority than everything else since specialized versions
# should overwrite. The user needs to adjust her priority in her snippets to
# ~-55 so that other filetypes will still overwrite.
priority -60

##############
# NICE BOXES #
##############
global !p
from vimsnippets import foldmarker, make_box, get_comment_format
LOREM = """
Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod \
tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At \
vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, \
no sea takimata sanctus est Lorem ipsum dolor sit amet.
"""

"""
matchp_closing matches closing parentheses by appening opening parentheses to
the beginning of text
"""
def matchp_closing(text, open_="(", closed=")"):
    new = ""
    stack = []
    for i in range(len(text)-1, -1, -1):
        new = text[i] + new
        if text[i] == closed:
            stack.append(closed)
        if text[i] == open_:
            if len(stack) == 0:
                # Erroneous closing bracket that cannot be reconciled
                return text

            if stack[-1] == closed:
                stack.pop()
            else:
                new = open_ + new
    return open_ * len(stack) + new

"""
matchp_opening matches opening parentheses by appening closing parentheses to
the end of text
"""
def matchp_opening(text, open_="(", closed=")"):
    new = ""
    stack = []
    for i in range(0, len(text)):
        new = new + text[i]
        if text[i] == open_:
            stack.append(open_)
        if text[i] == closed:
            if len(stack) == 0:
                # Erroneous opening bracket that cannot be reconciled
                continue

            if stack[-1] == open_:
                stack.pop()
            else:
                new = closed + new
    return new + closed * len(stack)



endglobal

snippet box "A nice box with the current comment symbol" b
`!p
box = make_box(len(t[1]))
snip.rv = box[0]
snip += box[1]
`${1:${VISUAL:content}}`!p
box = make_box(len(t[1]))
snip.rv = box[2]
snip += box[3]`
$0
endsnippet

snippet bbox "A nice box over the full width" b
`!p
if not snip.c:
	width = int(vim.eval("&textwidth - (virtcol('.') == 1 ? 0 : virtcol('.'))")) or 71
box = make_box(len(t[1]), width)
snip.rv = box[0]
snip += box[1]
`${1:${VISUAL:content}}`!p
box = make_box(len(t[1]), width)
snip.rv = box[2]
snip += box[3]`
$0
endsnippet

snippet fold "Insert a vim fold marker" b
`!p snip.rv = get_comment_format()[0]` ${1:Fold description} `!p snip.rv = foldmarker()[0]`${2:1} `!p snip.rv = get_comment_format()[2]`
endsnippet

snippet foldc "Insert a vim fold close marker" b
`!p snip.rv = get_comment_format()[0]` ${2:1}`!p snip.rv = foldmarker()[1]` `!p snip.rv = get_comment_format()[2]`
endsnippet

snippet foldp "Insert a vim fold marker pair" b
`!p snip.rv = get_comment_format()[0]` ${1:Fold description} `!p snip.rv = foldmarker()[0]` `!p snip.rv = get_comment_format()[2]`
${2:${VISUAL:Content}}
`!p snip.rv = get_comment_format()[0]` `!p snip.rv = foldmarker()[1]` $1 `!p snip.rv = get_comment_format()[2]`
endsnippet

##########################
# LOREM IPSUM GENERATORS #
##########################
snippet "lorem(([1-4])?[0-9])?" "Lorem Ipsum" r
`!p snip.rv = " ".join(LOREM.split()[:int(match.group(1))]) if match.group(1) else LOREM`
endsnippet

##########################
# VIM MODELINE GENERATOR #
##########################
# See advice on `:help 'tabstop'` for why these values are set. Uses second
# modeline form ('set') to work in languages with comment terminators
# (/* like C */).
snippet modeline "Vim modeline"
vim`!v ':set '. (&expandtab ? printf('et sw=%i ts=%i', &sw, &ts) : printf('noet sts=%i sw=%i ts=%i', &sts, &sw, &ts)) . (&tw ? ' tw='. &tw : '') . ':'`
endsnippet

#########
# DATES #
#########
snippet date "YYYY-MM-DD" w
`!v strftime("%Y-%m-%d")`
endsnippet

snippet ddate "Month DD, YYYY" w
`!v strftime("%b %d, %Y")`
endsnippet

snippet diso "ISO format datetime" w
`!v strftime("%Y-%m-%d %H:%M:%S%z")`
endsnippet

snippet time "hh:mm" w
`!v strftime("%H:%M")`
endsnippet

snippet datetime "YYYY-MM-DD hh:mm" w
`!v strftime("%Y-%m-%d %H:%M")`
endsnippet

snippet todo "TODO comment" bw
`!p snip.rv=get_comment_format()[0]` ${2:TODO}: $0${3: <${4:`!v strftime('%d-%m-%y')`}${5:, `!v g:snips_author`}>} `!p snip.rv=get_comment_format()[2]`
endsnippet

##########
#  Misc  #
##########
snippet uuid "Random UUID" w
`!p if not snip.c: import uuid; snip.rv = str(uuid.uuid4())`
endsnippet


#####################################################################
# Enclosing Text in Symbols
#
# Usage: <word> <symbol1><symbol2><tab> generates:
#	<symbol1><word><symbol2>
#
#	where <word> is any combination of non-whitespace characters
#
#####################################################################
priority 100
snippet "([^\s]+) ([^a-zA-Z\s])([^a-zA-Z\s])" "any" ri
`!p snip.rv=match.group(2)+match.group(1)+match.group(3)`
endsnippet

# #####################################################################
# # Enclosing Text in Symbols
# #
# # Usage: select <word>, then <tab><symbol1><symbol2><tab> generates:
# #	<symbol1><word><symbol2>
# #
# #	where <word> is any combination of non-whitespace characters
# #
# # Only use this snippet or the one above, not both
# #####################################################################
# priority 100
# snippet "([^a-zA-Z])([^a-zA-Z])" "test" ri
# `!p snip.rv=match.group(1)`${1:${VISUAL}}`!p snip.rv=match.group(2)`$0
# endsnippet


# # <tab> to match all brackets, parentheses, or braces
# # Better method uses a stack of (, [, and {
# priority 60
# snippet "(^|\s)([\{\[\(][^\s]+)" "match opening" ri
# `!p snip.rv=match.group(1)``!p
# text = match.group(2)
# text = matchp_opening(matchp_closing(text, "(", ")"), "(", ")")
# text = matchp_opening(matchp_closing(text, "[", "]"), "[", "]")
# snip.rv = matchp_opening(matchp_closing(text, "{", "}"), "{", "}")
# `$0
# endsnippet

# priority 61
# snippet "(^|\s)([^\s]+[\}\]\)])" "match closing" ri
# `!p snip.rv=match.group(1)``!p
# text = match.group(2)
# text = matchp_opening(matchp_closing(text, "(", ")"), "(", ")")
# text = matchp_opening(matchp_closing(text, "[", "]"), "[", "]")
# snip.rv = matchp_opening(matchp_closing(text, "{", "}"), "{", "}")
# `$0
# endsnippet


# This clashes with "jumping between snippets $1, $2, ...", so we need to get
# around that or remap the jump to next part key from <tab> to <leader><tab>
#
# priority -500
# snippet "([a-zA-Z]+)" "enclose selection in parentheses" ri
# `!p
# if snip.v.text != "":
#     snip.rv = match.group(1) + "(" + snip.v.text + ")"
# else:
#     snip.rv = match.group(1)
# `$0
# endsnippet

# vim:ft=snippets:
